1) Что такое процесс?
  Процесс — это идентифицируемая абстракция совокупности взаимосвязанных системных ресурсов на основе 
отдельного и независимого виртуального адресного пространства в контексте которой организуется выполнение потоков.
Компьютерная программа сама по себе — лишь пассивная последовательность инструкций. В то время как процесс — непосредственное выполнение этих инструкций.
Также, процессом называют выполняющуюся программу и все её элементы: адресное пространство, глобальные переменные, регистры, стек, открытые файлы и так далее.

2) Что такое поток?
  Поток выполнения — наименьшая единица обработки, исполнение которой может быть назначено ядром операционной системы. 
Реализация потоков выполнения и процессов в разных операционных системах отличается друг от друга, но в большинстве случаев поток выполнения находится внутри процесса.
Несколько потоков выполнения могут существовать в рамках одного и того же процесса и совместно использовать ресурсы, такие как память, тогда как процессы не 
разделяют этих ресурсов. В частности, потоки выполнения разделяют последовательность инструкций процесса (его код) и его контекст — значения переменных 
(регистров процессора и стека вызовов), которые они имеют в любой момент времени.

3) Где находится "куча"?
 При запуске процесса ОС выделяет в оперативной памяти место для размещения кучи. В дальнейшем память для кучи (под кучу) может выделяться динамически.

4) Где находится "стек"?
  В большей части платформ стек располагается в оперативной памяти (или регистровом файле, как в микроконтроллере Intel 8051), специализированный регистр 
указывает на его вершину

5) Что такое concurrency?
  Сoncurrency означает, что приложение выполняет более одной задачи одновременно.
Если компьютер имеет только один процессор, для выполнения более чем одной задачи одновременно процессор переключается между различными задачами во время выполнения.
Если у вас есть строго связанная с процессором работа, многопоточность – ваш единственный вариант. Весь смысл асинхронности состоит в том, чтобы оставить процессор 
(и ваши потоки) свободными, чтобы вы могли запускать другой код, ожидая завершения асинхронных операций. Если ваша работа связана с процессором, запуск ее асинхронно 
не имеет смысла. 

6)Что такое асинхронность?
  Асинхронная операция – это операция, которая продолжается в фоновом режиме после инициирования, не заставляя вызывающего абонента ждать ее завершения перед 
запуском другого кода. Однако, если функция не привязана к процессору-если она просто ждет завершения чего – то другого – это имеет меньше смысла. Если все, что функция 
делает, это ждет ответа от жесткого диска или базы данных или веб – службы, или даже от камеры или другого USB-устройства, нет необходимости заставлять процессор ждать 
этого ответа вместо того, чтобы выполнять полезную работу. Вместо того, чтобы блокировать вызывающую программу (или поток) до получения ответа, асинхронная (также называемая неблокирующей) 
реализация отправит запрос в базу данных или веб – службу или что-то еще, а затем немедленно вернется, позволяя вашей программе продолжать запускать другой код, пока 
удаленная служба отправляет ответ.

7) Что такое параллельность?
  Термин "параллельность" означает, что приложение разбивает свои задачи на более мелкие подзадачи, которые могут обрабатываться параллельно, например, на 
нескольких процессорах одновременно. Для достижения истинной параллельности ваше приложение должно иметь более одного потока, и каждый 
поток должен работать на отдельных процессорах / ядрах процессора / ядрах графического процессора видеокарты или аналогичных.

8) Что такое разделяемые ресурсы?
  Рязделяемые ресурсы - переменные и объекты которые могут быть использованы разными потоками.
Код, безопасный для одновременного вызова несколькими потоками, называется потокобезопасным.  Состояние гонки возникает только тогда, когда несколько потоков 
обновляют разделяемые ресурсы. Если ресурс создается, используется и удаляется в пределах
одного и того же потока и никогда не выходит из-под контроля этого потока, использование этого ресурса является потокобезопасным.

9) Что такое deadlock?
  Взаи́мная блокировка (сокращённо взаимоблокировка, англ. deadlock) — ситуация в многозадачной среде или СУБД, при которой несколько процессов находятся в состоянии ожидания ресурсов, 
занятых друг другом, и ни один из них не может продолжать свое выполнение. Пример блокировки :
 Процесс 1 хочет захватить A и B, начинает с A , Процесс 2 хочет захватить A и B, начинает с B;
 Процесс 1 Захватывает ресурс A                  Процесс 2 Захватывает ресурс B;
 Процесс 1 Ожидает освобождения ресурса B	 Процесс 2 Ожидает освобождения ресурса A

Если процессу нужно несколько блокировок, ему нужно всегда начинать с самой «большой» — предварительно освободив 
все захваченные «меньшие», если такие есть — и затем в нисходящем порядке. Это может привести к лишним действиям (если «меньшая» блокировка нужна и уже захвачена, она освобождается 
только чтобы тут же быть захваченной снова), зато гарантированно решает проблему.

10) Что такое race condition?
  Состояние гонки (англ. race condition), также конкуренция — ошибка проектирования многопоточной системы или приложения, при которой работа системы или приложения 
зависит от того, в каком порядке выполняются части кода.
Пример состояния гонки: поток A считывает переменную count общего объекта в свой кэш процессора. Поток B делает то же самое, 
но в другом кэше процессора. Теперь поток A добавляет один к count, и поток B делает то же самое. Теперь count был увеличен на два, по одному разу в 
каждом кэше процессора. Если бы эти приращения выполнялись последовательно, то переменная count была бы увеличена дважды и имела бы исходное значение + 2, 
записанное обратно в основную память.

11) Что такое критическая секция?
  Критическая секция — участок исполняемого кода программы, в котором производится доступ к общему ресурсу (данным или устройству), который не 
должен быть одновременно использован более чем одним потоком выполнения. При нахождении в критической секции двух (или более) потоков возникает 
состояние «гонки» («состязания»).

12) Что такое "пул потоков"? Зачем он нужен?
  Пул потоков- это набор потоков, которые могут быть "повторно использованы" для выполнения задач, так что каждый поток может выполнять более одной задачи. 
Пул потоков - это альтернатива созданию нового потока для каждой задачи, которую необходимо выполнить.
Создание нового потока сопряжено с понижением производительности по сравнению с повторным использованием уже созданного потока. 
Вот почему повторное использование существующего потока для выполнения задачи может привести к более высокой общей пропускной способности, 
чем создание нового потока для каждой задачи.

