1) Что такое .NET Framework?

Платформа .NET Framework — это технология, которая поддерживает создание и 
выполнение веб-служб и приложений Windows.
Платформа .NET Framework состоит из общеязыковой среды выполнения (среды CLR) 
и библиотеки классов .NET Framework. Основой платформы .NET Framework является 
среда CLR. Среду выполнения можно считать агентом, который управляет кодом 
во время выполнения и предоставляет основные службы, такие как управление памятью, 
управление потоками и удаленное взаимодействие. При этом средой накладываются условия 
строгой типизации и другие виды проверки точности кода, обеспечивающие безопасность 
и надежность. Фактически основной задачей среды выполнения является управление кодом. 
Код, который обращается к среде выполнения, называют управляемым кодом, 
а код, который не обращается к среде выполнения, называют неуправляемым кодом.

2) Какие плюсы у .NET Framework? Есть ли минусы?

.NET Framework — это зрелая и полнофункциональная платформа, которая поставляется 
вместе с Windows. Экосистему .NET Framework разработчики используют уже много лет. 
Она поддерживает разработку современных приложений и обладает 
высочайшей совместимостью с существующими приложениями и библиотеками. 
Минусы - .NET framework работает только в Windows.

3)Как устроены библиотеки и исполняемые файлы, разработанные для платформы .NET?

Программы, написанные для выполнения CLR, находятся в управляемых модулях -
байтовых потоках, хранящихся в виде файлов в локальной файловой системе или на
web-сервере.Модуль CLR содержит код, метаданные и ресурсы. Код обычно хранится в формате
CIL, хотя он также может быть сохранен в виде машинных инструкций, специфичных
для процессора. Метаданные модуля описывают типы, определенные в модуле,
включая имена, отношения наследования, сигнатуры методов и информацию о
зависимостях. Ресурсы модуля состоят из статических данных только для чтения,
таких как строки, растровые изображения и другие аспекты программы, которые не
сохраняются как исполняемый код.

4) Как они компилируются?

Загрузчик классов находит, загружает .NЕТ-классы в память
• готовит их для исполнения
• кэширует информацию о классе, чтобы класс не пришлось загружать снова в
процессе работы
• определяет, сколько требуется выделить памяти для экземпляра класса
• вставляет заглушку, вроде пролога функции, в каждый метод загруженного
класса, предназначенную для того, чтобы отмечать состояние JIТ-компиляции и
для перехода между управляемым и неуправляемым кодом
• если загруженный класс ссылается на другие классы, загрузчик попытается
загрузить эти классы, если классы, указанные в ссылках, уже были загружены,
загрузчику ничего делать не надо
• использует соответствующие метаданные для инициализации статических
переменных и создания экземпляра загруженного класса

Type Checker (Верификатор)
• проверяет являются ли метаданные корректными и действительными
• проверяет безопасен ли IL-код в отношении типов, т. е. корректно ли
используются сигнатуры типов

MSIL to Native Compilers (JlT -компиляторы)
• компилирует метод и преобразует его в управляемый машинный код
• генерирует управляемые данные, необходимые диспетчеру кода для поиска и ра
зворачивания стековых фреймов

5)Как выполняется приложение на .NET?

Для среды CLR основными
областями разграничениями служат домены приложения.
Домены приложений (AppDomains) играют ту же роль, что и процессы в
операционной системе. Как и процесс, домен приложения, выделяет (ограничивает)
некоторую область выполнения кода, предоставляет уровни изоляции ошибок,
обеспечивает изоляцию области и уровень безопасности, владеет ресурсами «от
лица» программы, которая в нем выполняется.
Процесс – это абстракция, созданная операционной системой, а домен – абстракция,
созданная средой CLR. Домен приложения всегда существует точно в одном процессе
операционной системы, в то же время один процесс может поддерживать
произвольное количество доменов.Домен приложения – это единица изоляции времени выполнения, внутри которой
запускается программа .NET. Он представляет границы управляемой памяти,
контейнер для загруженных сборок и параметров конфигурации приложения.

